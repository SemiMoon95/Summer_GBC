public class Node {
	private int data;
	private Node child;
	private Node sibling;
	
	public Node(int data){
		this.data=data;
	}
	
	public void setData(int data){
		this.data=data;
	}
	
	public int getData(){
		return data;
	}
	
	public void setChild(Node child){
		this.child=child;
	}
	
	public Node getChild(){
		return child;
	}
	
	public void setSibling(Node sibling){
		this.sibling=sibling;
	}
	
	public Node getSibling(){
		return sibling;
	}
	
}

import java.util.*;

public class NewTree {

	ArrayList<Node> children= new ArrayList<Node>();

	public void insert(Node parent, Node child) {
		if (parent.getChild() == null) {
			parent.setChild(child);
		} else {
			Node temp = parent.getChild();
			while (temp.getSibling() != null)
				temp = temp.getSibling();
			temp.setSibling(child);
		}
		if(!children.contains(parent)) children.add(parent);
		if(!children.contains(child)) children.add(child);
	}

	// traverse tree(preorder)
	public void traverse(Node node, int depth) {
		System.out.print(node.getData());

		if (node.getChild() != null)
			traverse(node.getChild(), depth + 1);

		if (node.getSibling() != null)
			traverse(node.getSibling(), depth);

		System.out.println();

	}

	public Node find(int key){
		int i=0;
		while(children.size()>i){
			Node temp=children.get(i);
			if(temp.getKey()==key){System.out.println("찾은 내용: "+temp.getData()); return temp;}
			else i++;
		}
		return null;
	}

	public String delete(int key) {
		Node st=find(key);
		if (children.isEmpty()) {
			System.out.println("Tree is empty");
			return null;
		}
		if(st!=null){
			children.remove(st);
			if(st.getChild()!=null){
			st=st.getChild();
				if(st.getSibling()!=null){st.setChild(st.getSibling());}
				return st.getData();
			}
			else st=null; return null;
		}
		else {
			System.out.println("WRONG KEY");
			return null;
		}
	}
}



public class Test {
	public static void main(String[] args){
		NewTree newTree=new NewTree();
		
		Node root=new Node("A",1);
		
		Node B=new Node("B",2);
		Node C=new Node("c",3);
		Node D=new Node("d",4);
		Node E=new Node("e",5);
		Node F=new Node("f",6);
		Node G=new Node("g",7);
		Node H=new Node("h",8);
		Node I=new Node("i",9);
		Node J=new Node("j",10);
		Node K=new Node("k",11);
		
		newTree.insert(root, B);
		newTree.insert(B, C);
		newTree.insert(B, D);
		
		newTree.insert(root, E);
		newTree.insert(E, F);
		newTree.insert(E, G);
		newTree.insert(E, H);
		
		newTree.insert(root, I);
		newTree.insert(I, J);
		
		newTree.insert(root, K);
		
		newTree.traverse(root, 0);
		newTree.find(2);
		newTree.delete(11);
		
		newTree.traverse(root, 0);
		
	}

}



